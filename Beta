Hi Tammy,
 
Thanks again for taking the time to visit our team last week. I think the conversations were very productive and after gathering everyone’s feedback, we decided that you should move to the next step of our hiring process. As discussed previously, our team offers successful interview candidates the opportunity to complete a short python project to give them a sense of the type of work we do, and offer them the opportunity to demonstrate their technology, computational, statistical, finance and communication skills.
 
Please find below the instructions. While there is no timeline and you can complete the project at your leisure, the time spent completing the project will be taken into account in assessing the results. Once you transmit your project, we will organize a phone feedback session during which you will be able to present your work and answer potential questions.
If you need any clarifications or have any questions about the project feel free to email me back.
 
Looking forward to reading your results,
 
Frederic Boyer
 
 
Instructions for the project :
The goal of this project is to develop efficient, reusable and reliable code for estimating a “market” hedging procedure for individual stocks using the python programming language.
 
Install python and use numpy (for instance see here: http://www.enthought.com/products/epd.php)
Goal 1: Compute name by name stock betas efficiently
You shall acquire US listed stock return data from your preferred source (data can be found on the internet free-of-charge).
Have at least 300 stocks covering small, medium and large market cap
Minimize “by hand” processing.
Then using the numpy package, write a function computing stock betas
Choose a window and compute running betas for each name (i.e. a beta number per name & day)
You could use numpy.linalg.lstsq but this may be slow.
Could you do better?
Look at adding potential features:
Computing betas for many names at a time (keep in mind looping in python can be slow, but element-wise numpy operations can be lightning fast)
Computing betas for many days at a time
The algorithm should be robust against bad inputs (including missing data, poor parsings, …)
An “easy first cut” algorithm as well as your most-optimized/best algorithm should be included in your solution
The code should provide :
                                                         i.            the dataset and/or code to gather it,

                                                       ii.            usage examples

                                                      iii.            be thoroughly tested using tools that come standard with the python distribution.

We expect a fast algorithm but no machine-specific optimization. Clarity, readability and organization of code will be taken into account.
Feel free to include timing results to show how material your improvements were.
h.      Separately, look for a library of non-parametric or semi-parametric (e.g. “machine learning”) algorithms possibly available in the python ecosystem, or design one yourself.

                                                         i.            Try to estimate betas using your preferred technique

                                                       ii.            How do your results compare to the LS estimator above ? Does it conform with you expectations?

Goal 2: Analyze estimated betas:
Summarize the estimated betas, cross-sectionally and in time. Comment on any important findings
Assume these betas will be used for a portfolio of stocks with 21-day holding period and daily index hedging, summarize hedging performance of the betas
Suggest any improvements to beta estimation to minimize the hedging error
Suggest a hedging methodology for a newly listed name (where price history is not yet available)
