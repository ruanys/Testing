def lowess_beta(full_data_set, bench_mark_symbol, validated_symbols, window_size, f=2. / 3., iter=3):
    
    r_s = rolling_window(full_data_set[validated_symbols].values.T, window_size)
    r_m = rolling_window(full_data_set[bench_mark_symbol].values.T, window_size)
    alpha = np.zeros(r_s.shape[:2])
    beta = np.zeros(r_s.shape[:2])
    
    index=np.arange(float(window_size))   
    r = int(ceil(f * window_size))
    h = [np.sort(np.abs(index - index[i]))[r] for i in range(window_size)]
    w_x = np.clip(np.abs((index[:, None] - index[None, :]) / h), 0.0, 1.0)
    initial_weight = (1 - w_x ** 3) ** 3
    xxx = pd.DataFrame(initial_weight)
    
    yest = np.zeros(window_size)
    delta = np.ones(window_size)
    
    for i in range(r_s.shape[0]):
        for j in range(r_s.shape[1]):
            w=initial_weight
            yest = np.zeros(window_size)
            delta = np.ones(window_size)
            for iteration in range(iter):
                for k in range(window_size):
                    weights = delta * w[:, k]
                    b = np.array([np.sum(weights * r_s[i,j,:]), np.sum(weights * r_s[i,j,:] * r_m[j,:])])
                    A = np.array([[np.sum(weights), np.sum(weights * r_m[j,:])],
                                  [np.sum(weights * r_m[j,:]), np.sum(weights * r_m[j,:] * r_m[j,:])]])
                    estimation = linalg.solve(A, b)
                    if k==window_size-1:
                        print weights
                        print estimation
                    yest[k] = estimation[0] + estimation[1] * r_m[j,:][k]
                    if k==window_size-1 and iteration==iter-1:
                        alpha[i,j]=estimation[0]
                        beta[i,j]=estimation[1]

                print yest
                residuals = r_s[i,j,:] - yest
                s = np.median(np.abs(residuals))
                
                delta = np.clip(residuals / (6.0 * s), -1, 1)
                delta = (1 - delta ** 2) ** 2  
    return alpha, beta, yest
    
    def lowess_beta_fast(full_data_set, bench_mark_symbol, validated_symbols, window_size, f=2. / 3.):
    
    r_s = rolling_window(full_data_set[validated_symbols].values.T, window_size)
    r_m = rolling_window(full_data_set[bench_mark_symbol].values.T, window_size)
    alpha = np.zeros(r_s.shape[:2])
    beta = np.zeros(r_s.shape[:2])
    
    index=np.arange(float(window_size))   
    r = int(ceil(f * window_size))
    h = [np.sort(np.abs(index - index[i]))[r] for i in range(window_size)]
    w_x = np.clip(np.abs((index[:, None] - index[None, :]) / h), 0.0, 1.0)
    weights = ((1 - w_x ** 3) ** 3)[:, -1]
    
    for i in range(r_s.shape[0]):
        for j in range(r_s.shape[1]):
            print weights
            b = np.array([np.sum(weights * r_s[i,j,:]), np.sum(weights * r_s[i,j,:] * r_m[j,:])])
            A = np.array([[np.sum(weights), np.sum(weights * r_m[j,:])],
                          [np.sum(weights * r_m[j,:]), np.sum(weights * r_m[j,:] * r_m[j,:])]])
            alpha[i,j], beta[i,j] = linalg.solve(A, b)
    return alpha, beta
    
    









def spearman_corr(full_data_set, bench_mark_symbol, window_size, validated_symbols):
    
    r_s = rolling_window(full_data_set[validated_symbols].values.T, window_size)
    r_m = rolling_window(full_data_set[bench_mark_symbol].values.T, window_size)
    corr_xy = np.zeros(r_s.shape[:2])
    
    for i in range(r_s.shape[0]):
        for j in range(r_s.shape[1]):
            corr_xy[i,j] = spearman_rank_corr(r_m[0,j,:], r_s[i,j,:], r_s.shape[2])
            
    market_std = np.std(r_m, axis=-1, ddof=0)
    ticker_std = np.std(r_s, axis=-1, ddof=0)
    
    res = pd.DataFrame(data=(corr_xy*ticker_std/market_std).T, index=full_data_set.index[window_size-1:], columns=full_data_set[validated_symbols].columns)
    res = res.shift(1)

    return res
    
    
    
    def spearman_rank_corr(X, Y, n):

    Xrank = stats.rankdata(X, method='average')
    Yrank = stats.rankdata(Y, method='average')

    diffs = Xrank - Yrank 
    print diffs
    corr = 1 - 6*sum(diffs*diffs)/(n*(n**2 - 1))
    return corr
    
    
    def blume_beta(beta_matrix, shift):
    
    beta_rolling = rolling_window(beta_matrix.T.values, 2)
    if shift==0:
        beta_day0 = beta_rolling[:,:,0]
    else:
        beta_day0 = beta_rolling[:,:,0][:,:-shift]
            
    beta_day1 = beta_rolling[:,:,1][:,shift:]

    beta = (np.mean(beta_day0*beta_day1, 0) - np.mean(beta_day0, 0)*np.mean(beta_day1, 0))/np.var(beta_day0, 0)*float(window_size)/(window_size)
    alpha = np.mean(beta_day1, 0) - np.mean(beta_day0, 0)*beta
    
    estimated = alpha + beta_day1*beta   
    res = pd.DataFrame(data=estimated.T, index=beta_matrix.index[shift+1:], columns=beta_matrix.columns)
    res = res.shift(shift)
    
    return res
    
    
    
    
    def vasicek_beta(beta_matrix, full_data_set, benchmark, validated_symbols, window_size, start_time):
    
    r_s = rolling_window(full_data_set[validated_symbols].values.T, window_size)
    r_m = rolling_window(full_data_set[bench_mark_symbol].values.T, window_size)

    std_err = np.zeros(r_s.shape[:2])
    for i in range(r_s.shape[0]):
        for j in range(r_s.shape[1]):
            m, b, r_value, p_value, std_err[i, j] = stats.linregress(r_m[j,:], r_s[i,j,:])
    
    var_err = std_err*std_err      
    var_err_df = pd.DataFrame(data=var_err.T, index=full_data_set.index[window_size-1:], columns=full_data_set[validated_symbols].columns)
    var_err_df = var_err_df.shift(1)   
        
    var_err_df = var_err_df.loc[start_time:]
    
    return res
    
    
    
    
    
    result2.multiply((result2.add(result2.var(axis=1), axis="index")).apply(lambda x: result2.var(axis=1).div(x)))
    
    
    
    def xxx_corr(full_data_set, bench_mark_symbol, window_size, validated_symbols):
    
    y = rolling_window(full_data_set[validated_symbols].values.T, window_size)
    x = rolling_window(full_data_set[bench_mark_symbol].values.T, window_size)
    
    xy = rolling_window(full_data_set[validated_symbols].values.T * (full_data_set[bench_mark_symbol]).values.T, window_size)
    corr_xy = ((np.mean(xy, -1) - np.mean(x, -1)*np.mean(y, -1))*float(window_size)/(window_size)/np.std(x, axis=-1, ddof=0)/np.std(y, axis=-1, ddof=0))
    
    print (np.mean(xy, -1) - np.mean(x, -1)*np.mean(y, -1))
    print np.std(x, axis=-1, ddof=0)
    print np.std(y, axis=-1, ddof=0)
    print corr_xy
    

    market_std = np.std(x, axis=-1, ddof=0)
    ticker_std = np.std(y, axis=-1, ddof=0)
    
    
    res = pd.DataFrame(data=(corr_xy*ticker_std/market_std).T, index=full_data_set.index[window_size-1:], columns=full_data_set[validated_symbols].columns)
    res = res.shift(1)

    return res
    
    
    #on how to get result2 for vasicek_beta
    dates = pd.date_range('20130101',periods=10)
    df = pd.DataFrame(np.random.randn(10,4),index=dates,columns=list('ABCD'))
    result2 = xxx_corr(df, ['A'], 3, ['B', 'C', 'D'])
    
